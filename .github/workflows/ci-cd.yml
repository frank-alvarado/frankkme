name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  infrastructure:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    env:
      # AWS credentials
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      # Cloudflare authentication
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      
      # Terraform variables
      TF_VAR_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
      TF_VAR_domain_name: frankk.me
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: Ensure State Bucket Exists
        working-directory: infrastructure
        run: |
          if ! aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}-terraform-state &>/dev/null; then
            echo "Creating Terraform state bucket..."
            aws s3 mb s3://${{ secrets.S3_BUCKET_NAME }}-terraform-state
            aws s3api put-bucket-versioning --bucket ${{ secrets.S3_BUCKET_NAME }}-terraform-state --versioning-configuration Status=Enabled
          fi

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init -reconfigure -backend-config=bucket=${{ secrets.S3_BUCKET_NAME }}-terraform-state -backend-config=region=${{ env.AWS_REGION }}

      - name: Import existing S3 bucket
        working-directory: infrastructure
        run: |
          if ! terraform state list | grep -q aws_s3_bucket.site; then
            terraform import aws_s3_bucket.site ${{ secrets.S3_BUCKET_NAME }}
          fi

      - name: Import existing CloudFront distribution
        working-directory: infrastructure
        run: |
          if ! terraform state list | grep -q aws_cloudfront_distribution.cdn; then
            # install jq for JSON parsing
            sudo apt-get update && sudo apt-get install -y jq
            # find and import existing CloudFront distribution by alias
            domain=${TF_VAR_domain_name}
            dist_id=$(aws cloudfront list-distributions --output json \
              | jq -r ".DistributionList.Items[] | select((.Aliases.Items // []) | index(\"${domain}\")) | .Id")
            if [ -n "$dist_id" ]; then
              terraform import aws_cloudfront_distribution.cdn $dist_id
            fi
          fi

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infrastructure

  build_and_deploy:
    name: Build and Deploy Site
    needs: infrastructure
    runs-on: ubuntu-latest
    env:
      # AWS credentials
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      # Deployment configuration
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build static site
        run: npm run build


      - name: Sync to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete --cache-control max-age=60
        env:
          AWS_S3_BUCKET: ${{ env.S3_BUCKET_NAME }}
          SOURCE_DIR: out/

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths '/*'
