name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test and Coverage
    defaults:
      run:
        working-directory: app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:ci
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: app/coverage
          fail_ci_if_error: true
          verbose: true
          
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Analyze bundle size
        env:
          ANALYZE: 'true'
        run: npm run build
          
  infrastructure:
    name: Provision Infrastructure
    # Only run on pushes to main, skip for PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      # AWS credentials
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # Cloudflare authentication
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      
      # Terraform variables
      TF_VAR_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
      TF_VAR_domain_name: frankk.me
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: Ensure State Bucket Exists
        working-directory: infrastructure
        run: |
          if ! aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}-terraform-state &>/dev/null; then
            echo "Creating Terraform state bucket..."
            aws s3 mb s3://${{ secrets.S3_BUCKET_NAME }}-terraform-state
            aws s3api put-bucket-versioning --bucket ${{ secrets.S3_BUCKET_NAME }}-terraform-state --versioning-configuration Status=Enabled
          fi

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init -reconfigure -backend-config=bucket=${{ secrets.S3_BUCKET_NAME }}-terraform-state -backend-config=region=${{ env.AWS_REGION }}

      - name: Terraform Apply
        working-directory: infrastructure
        run: terraform apply -auto-approve

  build_and_deploy:
    name: Build and Deploy Site
    defaults:
      run:
        working-directory: app
    environment:
      name: production
      url: https://frankk.me
    # Only run on pushes to main, skip for PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, infrastructure]
    runs-on: ubuntu-latest
    env:
      # AWS credentials
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1

      # Deployment configuration
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build static site
        run: npm run build

      - name: Generate CV PDF via Docker Action
        uses: addnab/docker-run-action@v2
        with:
          image: frjalv/cv-builder:latest
          options: "-v ${{ github.workspace }}/app/public:/work/app/public"
          run: python3 scripts/generate_cv.py

      - name: Sync to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete --cache-control max-age=60
        env:
          AWS_S3_BUCKET: ${{ env.S3_BUCKET_NAME }}
          SOURCE_DIR: app/out/

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths '/*'

  release_and_tag:
    name: Tag & Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build_and_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate version tag
        id: gen
        run: |
          DATE=$(date -u +"%Y-%m-%d")
          SHA=${GITHUB_SHA::7}
          TAG="$DATE-$SHA"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Create Git tag
        run: |
          git tag ${{ steps.gen.outputs.tag }}
          git push origin ${{ steps.gen.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.gen.outputs.tag }}
          release_name: Release ${{ steps.gen.outputs.tag }}
          body: "Release ${{ steps.gen.outputs.tag }} after successful deploy."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
